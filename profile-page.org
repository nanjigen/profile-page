#+TITLE: Static Blog with Google Cloud Storage and Weblorg
#+DATE: <2023-07-27 Thu>

This is a [[https://howardism.org/Technical/Emacs/literate-devops.html][Literate DevOps]] Google Cloud Platform implementation document which tells the story of the current state of the configuration of my personal site, while also declaring it in the form of source code. This is achieved via org-mode's ~noweb~ feature, allowing code blocks in the document to be tangled out to specified files.

It aims to demonstrate my capacity with GCP computing, serve as documentation for myself and also detailing to others how they might deploy a static website to Google Cloud Storage.

Tools used:
- [[https://www.terraform.io/][Terraform]]: as declarative IaC (Infrastructure As Code) files and the commandline tool =terraform=
- [[https://cloud.google.com/][GCP]]: with its ~gcloud~ and ~gsutil~ terminal access for management from my local console
- [[https://emacs.love/weblorg/][Weblorg]]: A static HTML generator that uses Elisp
- [[https://github.com/features/actions][Github Actions]]: For automating upload of static files in a CI/CD manner

* Cloud configuration
:PROPERTIES:
:CREATED:  [2022-09-22 Thu 16:57]
:ID:       e5f2285b-68f5-43a0-bc00-5a20fc657a73
:END:

There are several advantages to storing your static resources, such as images or JavaScript files, in a storage bucket:

- Cloud Storage operates much like a Content Delivery Network (CDN) without requiring any additional effort from you. This is because objects that are publicly accessible are automatically cached within the Cloud Storage network.

- The costs associated with data transfer for accessing content are usually lower with Cloud Storage compared to other solutions.

- Offloading the serving of static content to Cloud Storage can reduce the burden on your web servers, enhancing their performance and efficiency.


The following details my Google Cloud configuration as =terraform= =.tf= files and =gcloud/gsutil= commands. Where possible I have attempted to make the document reproducible with variables, requiring only a few manual interventions. Especially after the initial setup it should be fairly automated - you'll have to actually write blog posts yourself though!

** terraform
:PROPERTIES:
:CREATED:  [2023-07-05 Wed 20:20]
:ID:       78254fce-8dd7-43f9-86a2-e202123486d8
:END:

Here we write out a [[https://registry.terraform.io/modules/gruntwork-io/static-assets/google/latest/submodules/cloud-storage-static-website][terraform]] configuration declaring IaC to [[https://cloud.google.com/storage/docs/hosting-static-website][deploy a static website with a custom domain on Google cloud storage]]. This makes use of the =cloud-storage-static-website= module.

*** Authentication and local setup
:PROPERTIES:
:CREATED:  [2023-07-25 Tue 09:45]
:ID:       0f82b932-a0c0-4efb-8c1c-368f5a767c74
:END:

Its useful to have a local install of ~gcloud~ and ~terraform~ in order to work with Google Cloud. I do this with ~nix-env~ as these packages aren't available in the ~guix~ repos:

#+begin_src sh :eval no
nix-env -iA nixpkgs.google-cloud-sdk nixpkgs.terraform
#+end_src

In the future I may change this to a buffer-local nix-shell setup or write packages definitions for Guix.

Run ~gcloud~ in your terminal, following the sign-in wizard to connect to your project.

We then need to generate a credentials file so that Terraform can authenticate against your project.

Get the name of the service account:
#+begin_src shell :noweb yes :results silent
gcloud iam service-accounts list --project=<<project-id()>>
#+end_src

*** Delegate owners
:PROPERTIES:
:CREATED:  [2023-07-30 Sun 12:51]
:ID:       01ed72db-2064-4e0a-a2a2-d617353b0973
:END:

Because we are using a custom domain name, we need to verify our ownership with Google. Follow the following guide, note that the menus and processes will like differ slightly between domain providers.

https://cloud.google.com/storage/docs/domain-name-verification


*** Provider
:PROPERTIES:
:CREATED:  [2023-07-13 Thu 12:08]
:ID:       3da1c9ea-cc34-4402-9239-2b408f4d68c3
:END:
The Terraform configuration will rely on specific variables related to your Google Cloud project. We can use the ~gcloud~ command-line tool to set and get these values, and with the help of ~org-mode noweb~ [[https://orgmode.org/manual/Noweb-Reference-Syntax.html][references]], inline the results of get commands into the configuration blocks.

For example, getting the project name:
#+name: project-id
#+begin_src sh :noweb yes :cache yes :results silent
gcloud config get-value project
#+end_src

The storage bucket is created in the =asia-northeast1= region, allowing the site to be situated on Tokyo based servers, making access fast for potential employers based locally.

Now we can setup Google's Terraform provider. Notice the =<​<​project-id()​>​>=  which will run when we tangle the file.
#+name: terraform-main
#+begin_src terraform :noweb yes :tangle tf/main.tf :var id=project-id
provider "google" {
  credentials = file("../profile-website-391909-aa4d13879871.json")
  project     = "<<project-id()>>"
  region      = "asia-northeast1"
}

# GCP beta provider
provider "google-beta" {
  credentials = file("../profile-website-391909-aa4d13879871.json")
  project     = "<<project-id()>>"
  region      = "asia-northeast1"
}
#+end_src

*** Storage Bucket
:PROPERTIES:
:CREATED:  [2023-07-09 Sun 17:33]
:ID:       f0d0b8fe-e9f1-443e-b1d3-1ae23d27de38
:END:

In this example, =main_page_suffix= is set to "index.html", which means that if a user navigates to http://bucket_name.storage.googleapis.com/, they will see the contents of http://bucket_name.storage.googleapis.com/index.html.

The =not_found_page= is set to "404.html", which means that if a user requests a page that doesn't exist, they will see the contents of http://my-static-assets.storage.googleapis.com/404.html.

#+name: bucket-name
#+begin_src sh :dir tf :noweb yes :cache yes :results silent
terraform output bucket_name
#+end_src

Note that this can be set via a ~gcloud~ cli command:
#+begin_src sh :noweb yes :eval no
gcloud storage buckets update gs://<<bucket-name()>> --web-main-page-suffix=index.html
#+end_src

But this isn't declarative! Instead we'll use terraform again.

Setup the bucket:
#+begin_src terraform :tangle tf/main.tf
# Create new storage bucket in the asia-northeast1 region
# and settings for main_page_suffix and not_found_page

resource "google_storage_bucket" "static_website" {
  name          = "www.danielotto.jp"
  location      = "asia-northeast1"
  storage_class = "STANDARD"
  website {
    main_page_suffix = "index.html"
    not_found_page   = "404.html"
  }
}

#+end_src

Then we can set a ~terraform~ variable that points to the output folder containing the html and other static assets defined later in the ~weblorg~ configuration:

#+begin_src terraform :noweb-ref tf-variables
variable "output_folder" {
  description = "Bucket's html directory"
  type        = string
  default     = "../output"
}
#+end_src

#+begin_src terraform :tangle tf/main.tf
# Upload a simple index.html page to the bucket
resource "google_storage_bucket_object" "index_page" {
  name   = "index.html"
  source = "${var.output_folder}/index.html"
  bucket = google_storage_bucket.static_website.name
}

# Upload a simple 404 / error page to the bucket
resource "google_storage_bucket_object" "errorpage" {
  name         = "404.html"
  content      = "<html><body>404!</body></html>"
  content_type = "text/html"
  bucket       = google_storage_bucket.static_website.name
}
#+end_src

#+begin_src terraform :tangle tf/main.tf
resource "google_storage_bucket_object" "posts" {
  for_each = { for k in fileset("${path.module}/output/posts", "**") : k => k }
  name     = "output/posts/${each.key}"
  source   = "${var.output_folder}/posts/${each.key}"
  bucket   = google_storage_bucket.static_website.name
}
#+end_src

#+begin_src terraform :noweb-ref tf-variables
variable "static_folder" {
  description = "Bucket's static assets directory"
  type        = string
  default     = "../static"
}
#+end_src

#+begin_src terraform :tangle tf/main.tf
# locals {
#   static_files = fileset("${path.module}/static", "**")
# }

resource "google_storage_bucket_object" "static_files" {
  for_each = { for k in fileset("${path.module}/static", "**") : k => k }
  name     = "static/${each.key}"
  source   = "${var.static_folder}/${each.key}"
  bucket   = google_storage_bucket.static_website.name
}
#+end_src

When you host a static website on Google Cloud Storage, you need to make the bucket and its contents publicly accessible so they can be served over the internet.

Here's how to make it publicly accessible via cli using ~gsutil~:

#+begin_src sh :noweb yes :eval no
gsutil iam ch allUsers:objectViewer gs://<<bucket-name()>>
#+end_src

** git deployment
:PROPERTIES:
:CREATED:  [2022-09-28 Wed 15:29]
:ID:       bd762a86-cf35-4873-ace8-1c6ddb80c862
:header-args: :tangle no :eval no
:END:
https://medium.com/interleap/automating-terraform-deployment-to-google-cloud-with-github-actions-17516c4fb2e5

Setting up a CI/CD pipeline for your site using GitHub Actions can streamline your deployment process, ensuring that changes to the site are automatically tested and deployed to the Google Cloud Storage bucket. This is useful not only to publish new posts, but also to have configurations like ~jinja~ or ~CSS~ code to propagate to the live site after testing locally in an automated fashion.

Setting up CI/CD with GitHub Actions in 4 steps:

1. GitHub Repository: Ensure your website's code is stored in a GitHub repository.

2. Service Account: Create a Google Cloud Service Account with permissions to manage the Google Cloud Storage bucket. Download the JSON key for this service account.

3. GitHub Secrets: Store the Service Account JSON key as a secret in your GitHub repository. This will allow GitHub Actions to authenticate with Google Cloud. Navigate to your =repository > Settings > Secrets > New repository secret=. Name it ~GCP_SA_KEY~.

4. GitHub Action Workflow: Describe a declarative workflow.

Create a new file in your repository: =.github/workflows/deploy.yml= with the following content:

The =.yaml= file you use for GitHub Actions defines a workflow. This workflow is a series of automated procedures that run when a specific event occurs in your GitHub repository, such as a =push= to the =main= branch. Let's break down the provided =.yaml= file step by step:

#+begin_src yaml :tangle .github/workflows/workflow.yaml
name: Deploy Website
#+end_src

Name the workflow so you can identify it in the GitHub Actions UI, here we use "Deploy Website" - descriptive!

*** Events
:PROPERTIES:
:CREATED:  [2023-08-07 Mon 12:46]
:ID:       846e1424-8853-481b-ad09-d03f32a45792
:END:

This section defines the event that triggers the workflow. In this case, the workflow runs whenever there's a =push= event to the =main= branch:

#+begin_src yaml :tangle .github/workflows/workflow.yaml
on:
  push:
    branches:
      - main  # or your default branch
#+end_src

*** Jobs
:PROPERTIES:
:CREATED:  [2023-08-07 Mon 12:47]
:ID:       40ad0ce2-b847-4248-9dec-3aba8a99c820
:END:

Here, we're defining a [[https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners][Github-hosted runner]] as a job named =deploy= that will run on the latest version of the Ubuntu virtual machine provided by GitHub:

#+begin_src yaml :tangle .github/workflows/workflow.yaml
jobs:
  deploy:
    runs-on: ubuntu-latest
#+end_src

**** Steps
:PROPERTIES:
:CREATED:  [2023-08-07 Mon 12:47]
:ID:       7efb2e51-e2cb-41f0-bb47-62c9688e3e98
:END:

This section lists the steps that the job will execute in sequence:

#+begin_src yaml :tangle .github/workflows/workflow.yaml
    steps:
#+end_src

This step checks out your repository's code onto the runner (the virtual machine executing the job). It uses a pre-built action =actions/checkout@v2= provided by GitHub:

#+begin_src yaml :tangle .github/workflows/workflow.yaml
    - name: Checkout code
      uses: actions/checkout@v2
#+end_src

The following steps set up the Google Cloud CLI on the runner. It first authenticates via the Service Account Key JSON we provided to Github as a secret using the pre-built ~auth~ action from [[https://github.com/google-github-actions/auth][google-github-actions/auth]]. It then uses another pre-built from the [[https://github.com/google-github-actions/setup-gcloud][google-github-actions/setup-gcloud]] repo provided by Google. Note that we don't use the =main= branch, but instead =v1= as [[https://github.com/google-github-actions/setup-gcloud#versioning][per the suggestion]] on the action's repo.
The =with= section provides configuration:

#+begin_src yaml :tangle .github/workflows/workflow.yaml
    - name: Authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'
#+end_src

#+begin_src yaml :tangle .github/workflows/workflow.yaml
    - name: Setup Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v1
      with:
        project_id: 'profile-website-391909'
#+end_src

- =service_account_key=: This is the Service Account JSON key stored as a secret in your GitHub repository. It's used to authenticate with Google Cloud.
- =project_id=: The ID of your Google Cloud project.
- =export_default_credentials=: This exports the credentials, allowing subsequent steps to use them.

#+begin_src yaml :tangle .github/workflows/workflow.yaml :results ?
    - name: Deploy to GCS
      run: |
        gsutil rsync -R ./output gs://www.danielotto.jp/output
#+end_src

This step deploys your site to Google Cloud Storage. It uses the =gsutil= command, which is a part of the Google Cloud SDK:

- =gsutil rsync=: This command synchronizes the contents of a directory with a bucket.
- =-R=: This flag ensures the command is recursive, so it includes all sub-directories.
- =./path_to_site_files=: This is the local directory containing your site's files.
- =gs://your-bucket-name/=: This is the destination bucket in Google Cloud Storage.

In essence, this =.yaml= file defines a workflow that:

1. Checks out your code.
2. Sets up the Google Cloud CLI.
3. Syncs your site's files with a Google Cloud Storage bucket.

When you push to the =main= branch, GitHub Actions reads this =.yaml= file, sets up a virtual machine, and executes the defined steps in order. This automates the deployment of a static site to Google Cloud Storage.

** Files
:PROPERTIES:
:CREATED:  [2023-07-13 Thu 12:38]
:ID:       22e804e6-85f3-4049-8c80-42b664d73f8f
:END:
*** tf/main.tf
:PROPERTIES:
:CREATED:  [2023-07-13 Thu 12:38]
:ID:       e792e354-7bd9-4762-a63e-8d6b477f933b
:END:
*** tf/variables.tf
:PROPERTIES:
:CREATED:  [2023-07-13 Thu 12:38]
:ID:       7e8e8be3-a3d5-46ac-ac8c-51ec726e6b83
:END:

#+begin_src terraform :noweb yes :tangle tf/variables.tf
<<tf-variables>>
#+end_src

* Weblorg configuration
:PROPERTIES:
:CREATED:  [2023-07-27 Thu 15:13]
:ID:       a8a2cca3-ac76-49e2-b826-efc504567c08
:END:
** Theme
:PROPERTIES:
:CREATED:  [2022-09-22 Thu 16:57]
:ID:       3c505129-0b7a-44a5-91a9-e48bb46413fc
:header-args: :eval no
:END:
https://github.com/clarete/clarete.github.io/tree/main
https://www.lucacambiaghi.com/posts/weblorg.html

*** main
:PROPERTIES:
:CREATED:  [2022-10-09 Sun 18:24]
:ID:       7e9b9c56-f9f6-4d51-9f13-245a4268897d
:END:
#+begin_src css :tangle theme/static/css/main.css
@import "common.css" screen;
@import "colors.css" screen;

:root {
    --background: var(--theme-dracula-background);
    --foreground: var(--theme-dracula-foreground);
    --foreground-secondary: #bfbfbf;

    /* --- --- --- Syntax Highlighting for Code Sections --- --- ---  */
    ---code-background:           var(--theme-dracula-background);
    ---code-foreground:           var(--theme-dracula-foreground);
    ---code-builtin:              var(--theme-dracula-builtin);
    ---code-comment:              var(--theme-dracula-comment);
    ---code-doc:                  var(--theme-dracula-doc);
    ---code-function-name:        var(--theme-dracula-function-name);
    ---code-keyword:              var(--theme-dracula-keyword);
    ---code-string:               var(--theme-dracula-string);
    ---code-type:                 var(--theme-dracula-type);
    ---code-variable-name:        var(--theme-dracula-variable-name);
    ---code-rainbow1:             var(--theme-dracula-rainbow1);
    ---code-rainbow2:             var(--theme-dracula-rainbow2);
    ---code-rainbow3:             var(--theme-dracula-rainbow3);
    ---code-rainbow4:             var(--theme-dracula-rainbow4);
}

body                             { background: var(--background); color: var(--foreground); }

/* -- Code Blocks -- */
.org-builtin                     { color: var(---code-builtin); }
.org-comment                     { color: var(---code-comment); }
.org-comment-delimiter           { color: var(---code-comment); }
.org-doc                         { color: var(---code-doc); }
.org-function-name               { color: var(---code-function-name); }
.org-keyword                     { color: var(---code-keyword); }
.org-string                      { color: var(---code-string); }
.org-type                        { color: var(---code-type); }
.org-variable-name               { color: var(---code-variable-name); }
.org-src-container               { color: var(---code-foreground);
                                   background: var(---code-background);
                                   border: 1px solid var(---border-src); }
.org-rainbow-delimiters-depth-1  { color: var(---code-rainbow1); }
.org-rainbow-delimiters-depth-2  { color: var(---code-rainbow2); }
.org-rainbow-delimiters-depth-3  { color: var(---code-rainbow3); }
.org-rainbow-delimiters-depth-4  { color: var(---code-rainbow4); }
.org-rainbow-delimiters-depth-5  { color: var(---code-rainbow1); }
.org-rainbow-delimiters-depth-6  { color: var(---code-rainbow2); }
.org-rainbow-delimiters-depth-7  { color: var(---code-rainbow3); }
.org-rainbow-delimiters-depth-8  { color: var(---code-rainbow4); }
.org-rainbow-delimiters-depth-9  { color: var(---code-rainbow1); }
.org-rainbow-delimiters-depth-10 { color: var(---code-rainbow2); }
.org-rainbow-delimiters-depth-11 { color: var(---code-rainbow3); }
.org-rainbow-delimiters-depth-12 { color: var(---code-rainbow4); }


.pubdate { color: var(--foreground-secondary); }
#+end_src

*** common
:PROPERTIES:
:CREATED:  [2022-10-09 Sun 18:24]
:ID:       6d7e0f09-41a9-4671-8f4e-0f386d9c1f7c
:END:
#+begin_src css  :tangle theme/static/css/common.css
/* Document configurations */
body                 { padding: 0px; margin: 0px; font-family: monospace, sans-serif; font-size: 16pt;
                       line-height: 32px; display: flex; flex-direction: column; min-height: 100vh; }

/* Titles */
h1, h2, h3, h4, h5   { padding: 0; margin-top: 60px; color: #83a598; }
h1                   { font-size: 55px; line-height: 1.1em; }
h2                   { font-size: 40px; line-height: 1.1em; }
h3                   { font-size: 30px; line-height: 1.1em; }

/* links */
a                    { color: #bd93f9; text-decoration: none; }
a:hover              { color: #fff; }

/* Horizontal bar */
hr                   { border-top: 0; border-bottom: solid 1px #3c3836; }

/* Element that wraps everything */
.container           { width: calc(55% - 100px); padding: 10px 150px; margin: 0 auto; }

/* Elements that can appear anywhere */
.note                { background-color: #504945; padding: 5px 25px; border-radius: 10px; }
.centralized img     { margin: auto auto; display: block; }

/* Top bar with the badges */
.social              { margin: 60px 0; }
.social .avatar      { width: 100px; height: 100px; display: block; margin: 0 auto; float: left;
                       background-color: #bd93f9; border-radius: 10px; padding: 6px 4px; }
.social .badges      { float: right; width: 155px; font-size: 36px; list-style: none; display: block; }
.social .badges li   { padding-left: 8px; float: left; }
.social .badges a    { float: left; display: block; width: 36px; height: 36px; overflow: hidden; margin-left: 5px; padding: 1px;
                       color: #50fa7b; }
.social .badges a:hover { color: #bd93f9; }
.social .badges a span  { height: 50px; }

/* Footer */
.footer              { font-size: .8em; margin: 0; }
.footer .email-link  { text-align: center; font-size: 30px; color: #44475a; padding: 40px 0; }
.footer .bg          { background: #44475a; padding: 40px 0; }
.footer a            { color: #000; text-decoration: none; }
.footer a:hover      { text-decoration: underline; background: transparent; }

/* Listing */
ul.posts            { padding-left: 20px; }
ul.posts li         { padding-bottom: 20px; }
ul.posts span.date  { padding-right: 5px; text-align: right; }
ul.posts .comment   { padding-top: 10px;  color: #666; }

/* For pages that list posts */
.content.slides > ul,
.content.blog > ul  { list-style: none;  padding: 0; }
.content.slides > ul > li,
.content.blog > ul > li { margin-bottom: 10px; }

/* Content formatting */
#content            { width: calc(60% - 100px); padding: 10px 150px; margin: auto auto; color: #333; }
.post               { display: block; min-height: 70vh; display: flex; flex-grow: 1; flex-direction: column; }
.subtitle { color: #aaa; }

/* Code blocks */
code                { background: #3c3836; color: #fff; padding: 0 0.5rem; border-radius: 3px; }
.org-src-container  { overflow-x: auto; padding: 10px 40px; border-radius: 10px; margin: 20px 0; line-height: 1.3; }

/* Very small width */
@media (max-width: 480px) {
    h1                   { margin-top: 20px; }
    .social              { margin: 20px 0; }
    .social .badges      { padding: 0 20px 0 0; }
    .container,
    #content, .container { width: 90%; padding: 10px; }
}

/* Medium width */
@media (min-width: 480px) and (max-width: 1000px) {
    .social              { margin: 20px 0; }
    #content, .container,
    .container           { width: 80%; padding: 10px; }
}
#+end_src

*** colors
:PROPERTIES:
:CREATED:  [2022-10-09 Sun 18:24]
:ID:       76fe91b2-6299-401f-9cb1-69ba8adffe14
:END:
#+begin_src css :tangle theme/static/css/colors.css
:root {
    --theme-dracula-background              : #141d28;
    --theme-dracula-background-secondary-alt: #44475a;
    --theme-dracula-background-secondary    : #1e1f29;
    --theme-dracula-foreground              : #f8f8f2;
    --theme-dracula-sidebar-background      : #233346;
    /*COLOURS */
    --theme-dracula-green                   : #50fa7b;
    --theme-dracula-violet                  : #bd93f9;
    --theme-dracula-magenta                 : #ff79c6;
    --theme-dracula-orange                  : #ffb86c;
    --theme-dracula-cyan:                     #8be9fd;
    --theme-dracula-red:                      #ff5555;
    --theme-dracula-yellow:                   #f1fa8c;
    --theme-dracula-body-text:               : #C3C3C3;
    --theme-dracula-comment:                 : #6272a4;
    --theme-dracula-doc:                    var(--theme-dracula-cyan);
    --theme-dracula-function-name:          var(--theme-dracula-green);
    --theme-dracula-keyword:                var(--theme-dracula-magenta);
    --theme-dracula-string:                 var(--theme-dracula-yellow);
    --theme-dracula-type:                   var(--theme-dracula-violet);
    --theme-dracula-rainbow1:               var(--theme-dracula-magenta);
    --theme-dracula-rainbow2:               var(--theme-dracula-violet);
    --theme-dracula-rainbow3:               var(--theme-dracula-green);
    --theme-dracula-rainbow4:               var(--theme-dracula-yellow);
    --theme-dracula-variable-name:          var(--theme-dracula-magenta);
    --theme-dracula-page-links              : #C26EFF;
    --theme-dracula-attributes-color        : #FFFF80;
    --theme-dracula-external-links          : #7CE973;
    --theme-dracula-links-hover             : #92FFFF;
    --theme-dracula-hashtags                : #FFD17E;
    --theme-dracula-italics-color           : #FF7EA2;
    --theme-dracula-bold-color              : #FF4E4E;
    --theme-dracula-highlight-text-color    : #47405E;
    --theme-dracula-highlighter             : #FFFF80;
    --theme-dracula-sidebar-text            : #F2F2F2;
    --theme-dracula-page-heading            : #FFBE49;
    --theme-dracula-daily-heading           : #FFCA6A;
    --theme-dracula-headings                : #F2F2F2;
    --theme-dracula-bullets                 : #7A6DAA;
    --theme-dracula-closed-bullets          : #3E445D;
    --theme-dracula-references              : #9E8DDB;
    --theme-dracula-block-reference-text    : #FF9580;
    --theme-dracula-namespaces              : #5EB9FF;
    --theme-dracula-all-pages-mentions      : #FF9580;
    --theme-dracula-cursor                  : #F2F2F2;
    --theme-dracula-icons                   : #FBCC77;
    --theme-dracula-icons-hover             : #81FFEA;
    --theme-dracula-filter-icon             : #C26EFF;
    /* DROPDOWN MENU */
    --theme-dracula-dropdown-menu-background: #1E2B3B;
    --theme-dracula-dropdown-menu-highlight : #454259;
    --theme-dracula-dropdown-menu-text      : #F2F2F2;
    --theme-dracula-dropdown-newpage        : #9580FF;
    /* SEARCH BAR */
    --theme-dracula-search-bar-background   : #19191E;
    --theme-dracula-search-bar-text         : #F2F2F2;
    /* KANBAN CARD COLORS */
    --theme-dracula-kanban-main-background  : #1B1A23;
    --theme-dracula-kanban-column-background: #2A2C37;
    --theme-dracula-kanban-card-background  : #1B1A23;
    --theme-dracula-kanban-text-hover       : #81FFEA;
}
#+end_src

*** Templates
:PROPERTIES:
:CREATED:  [2022-10-09 Sun 18:23]
:ID:       7d8f1b58-b897-46ac-a990-20fe9304c4d8
:END:

**** index
:PROPERTIES:
:CREATED:  [2022-10-09 Sun 18:36]
:ID:       4430ba49-0262-4777-b7a5-eb8ff9eb1122
:END:
#+begin_src html  :tangle theme/templates/index.html
{# index.html --- Template for my website's index page -*- Mode: Jinja2; -*- #}
{% extends "layout.html" %}

{% block main %}
  <h1>{{ post.title }}</h1>

  {{ post.html|safe }}
{% endblock %}
#+end_src

**** page
:PROPERTIES:
:CREATED:  [2023-07-13 Thu 22:27]
:ID:       97e76201-704c-4189-9e80-e8321f31ec73
:END:
#+begin_src web :tangle theme/templates/page.html
{% extends "layout.html" %}

{% block main %}
  <article class="page">
    <h1 class="page__title">
      {{ post.title }}
    </h1>
    <section>
      {{ post.html|safe }}
    </section>
  </article>
{% endblock %}
#+end_src

**** post
:PROPERTIES:
:CREATED:  [2023-07-13 Thu 22:30]
:ID:       08f2fbfe-79f0-42ef-a994-9edc2e8ca963
:END:

#+begin_src web :tangle theme/templates/post.html
{% extends "layout.html" %}

{% block meta %}
  <meta property="og:title" content="{{ post.title }}">
  <meta property="og:url" content="{{ post.url }}">
  {% if post.description is defined %}
    <meta property="og:description" content="{{ post.description }}">
  {% elif project_description is defined %}
    <meta property="og:description" content="{{ project_description }}">
  {% endif %}
  {% if post.image is defined %}
    <meta property="og:image" content="{{ post.image }}">
  {% elif project_image is defined %}
    <meta property="og:image" content="{{ project_image }}">
  {% endif %}
  <meta name="twitter:card" content="summary_large_image">
{% endblock %}

{% block main %}
  <article class="post">
    <h1 class="post__title">
      {{ post.title }}
    </h1>
    <section class="post__meta">
      {% if post.date is defined %}
        {{ post.date | strftime("%Y-%m-%d") }}
      {% endif %}
    </section>
    <section>
      {{ post.html|safe }}
    </section>
  </article>
{% endblock %}
#+end_src

**** blog
:PROPERTIES:
:CREATED:  [2023-07-27 Thu 13:28]
:ID:       2d421477-ad84-408c-b8a3-4b612f949d82
:END:

#+begin_src web :tangle theme/templates/blog.html
{# blog.html --- Blog template; -*- Mode: Jinja2; -*- #}
{% extends "layout.html" %}

{% block body %}
  <div class="title">
    <h1>blog</h1>
  </div>

  <div class="content blog">
    <ul>
      {% for post in posts %}
        <li>
          <a href="{{ url_for("posts", slug=post.slug) }}">
            {{ post.date|strftime("%b %d, %Y") }}: {{ post.title }}
          </a>
        </li>
      {% endfor %}
    </ul>
  </div>
{% endblock %}
#+end_src

**** layout
:PROPERTIES:
:CREATED:  [2022-10-09 Sun 18:36]
:ID:       8c8ea744-8cf8-491b-ae38-476c864549c7
:END:

#+begin_src web  :tangle theme/templates/layout.html
{# layout.html --- Base template for all other templates -*- Mode: Jinja2; -*-

The blocks available in this file are:

,* title: What will show within the HTML <title> tag.
    ,* description: What will show within the HTML <meta> description tag.
    ,* nav: Navigation bar with Links, a default is provided
    ,* body: Main content which starts empty
    ,* footer: Bottom links, default is provided

    #}

<!doctype html>
<html lang="en-us">
    <head>
        {% block head %}
        <meta charset="utf-8">
        <!-- <title>{% block title %}Home{% endblock %}</title> -->
        <title>
            {% block title %}{{ site_name | default("Daniel Otto - Home") }}{% endblock %}
            {% block subtitle %}{% endblock %}
        </title>
        <meta name="description" content="{% block description %}{% endblock %}">
        <meta name="viewport" content="width=device-width, initial-scale=1">
        {% if site_owner is defined %}<meta name="author" content="{{ site_owner }}" />{% endif %}
        {% if site_description is defined %}<meta name="description" content="{{ site_description }}" />{% endif %}
        {% if site_keywords is defined %}<meta name="keywords" content="{{ site_keywords }}" />{% endif %}
        {% block meta %}{% endblock %}
        <link rel="stylesheet" type="text/css" href="/static/css/main.css">
        <!-- <link rel="stylesheet" href="{{ url_for("static", file="main.css") }}" type="text/css" /> -->
        <link rel="stylesheet" type="text/css" href="https://maxcdn.bootstrapcdn.com/font-awesome/4.6.3/css/font-awesome.min.css">
        <link rel="icon" type="image/png" href="/static/img/lambda-in-8bit.png">
        <link rel="alternate" type="application/rss+xml" href="/blog/rss.xml">
        {% endblock %}
    </head>
    <body>
        {# Top navigation bar #}
        {% block nav %}
        <header>
            <h1>
                <a href="{{ url_for("index") }}">
                    {% block title %}{{ site_name | default("Daniel Otto") }}{% endblock %}
                </a>
            </h1>
            <a href="#main" class="visually-hidden">jump to main content</a>
            <nav>
                <ul class="menu">
                    <li><a href="{{ url_for("pages", slug="about") }}">about</a></li>
                    <li><a href="{{ url_for("blog",  slug="blog") }}">posts</a></li>
                </ul>
            </nav>
        </header>
        <div class="social">
            <div class="container">
                <ul class="badges">
                    <li>
                        <a href="mailto:contact@danielotto.jp" alt="Email">
                            <span class="fa fa-envelope-o"></span>EMail
                        </a>
                    </li>
                    <li>
                        <a href="https://github.com/nanjigen" target="_blank" alt="Github">
                            <span class="fa fa-github-alt"></span>Github
                        </a>
                    </li>
                    <li>
                        <a href="https://linkedin.com/in/dmotto" target="_blank" alt="LinkedIn">
                            <span class="fa fa-linkedin"></span>LinkedIn
                        </a>
                    </li>
                    <li>
                        <a href="/blog/rss.xml" alt="RSS">
                            <span class="fa fa-rss"></span>RSS
                        </a>
                    </li>
                </ul>
                <a href="/">
                    <img class="avatar" type="image/svg+xml" src="/static/img/lambda-in-8bit.svg" alt="lambda" />
                </a>
            </div>
        </div>
        {% endblock %}

        {# Probably where most of the action will happen #}
        <main id="main">
            {% block main %}{% endblock %}
        </main>

        <div class="post">
            <div class="container">
                {% block body %}{% endblock %}
            </div>
        </div>

        <div class="footer">
            {% block footer %}
            <div class="bg">
                <div class="container">
                    &#169; Daniel Otto &mdash; All written content on this
                    website reflects my personal opinion and it's available
                    under <a href="https://creativecommons.org/licenses/by/4.0/" target="_blank">CC BY 4.0</a>
                </div>
            </div>
            {% endblock %}
        </div>

    </body>
</html>
#+end_src

** publish.el
:PROPERTIES:
:CREATED:  [2022-10-09 Sun 18:14]
:ID:       8c6bdab7-8977-40b2-a575-80bdb7cf4966
:END:

The below is required to get the right dependencies
#+begin_src elisp :tangle publish.el :results silent
;; Guarantee the freshest version of the weblorg
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/weblorg")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/templatel")
(require 'weblorg)
(require 'templatel)

;; Setup package management
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(use-package rainbow-delimiters :config :ensure t)

;; Install and configure dependencies
(use-package templatel :ensure t)
(use-package htmlize
  :ensure t
  :config
  (setq org-html-htmlize-output-type 'css))
#+end_src

#+begin_src elisp :tangle publish.el :results silent
(weblorg-site
 :template-vars '(("site_name" . "Daniel Otto's profile site")
                  ("site_author" "Daniel Otto")
                  ("site_email" . "contact@danielotto.jp")
                  ("site_description" . "My personal profile and blog about Linguistics, computing and translation.")))

(setq weblorg-default-url "https://www.danielotto.jp")

;; route for rendering each post
(weblorg-route
 :name "posts"
 :input-pattern "posts/*.org"
 :template "post.html"
 :output "output/posts/{{ slug }}.html"
 :url "/posts/{{ slug }}.html")

;; route for rendering the posts page of the blog
(weblorg-route
 :name "blog"
 :input-pattern "posts/*.org"
 :input-aggregate #'weblorg-input-aggregate-all-desc
 :template "blog.html"
 :output "output/posts.html"
 :url "/posts.html")

;; route for rendering the index page of the blog
(weblorg-route
 :name "index"
 :input-pattern "pages/about.org"
 ;; :input-aggregate #'weblorg-input-aggregate-all-desc ;;BUG
 :template "index.html"
 :output "output/index.html"
 :url "/")

;; route for rendering each page
(weblorg-route
 :name "pages"
 :input-pattern "pages/*.org"
 :template "page.html"
 :output "output/{{ slug }}.html"
 :url "/{{ slug }}.html")

;; route for static assets that also copies files to output directory
(weblorg-copy-static
 :output "static/{{ file }}"
 :url "/static/{{ file }}")

;; fire the engine and export all the files declared in the routes above
(weblorg-export)
#+end_src

#+begin_src sh :results silent
emacs --script publish.el
#+end_src
