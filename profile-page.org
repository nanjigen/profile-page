
* Droplet configuration
:PROPERTIES:
:CREATED:  [2022-09-22 Thu 16:57]
:ID:       e5f2285b-68f5-43a0-bc00-5a20fc657a73
:END:

Point nameservers to Digital Ocean's:

#+begin_src sh
ns1.digitalocean.com
ns2.digitalocean.com
ns3.digitalocean.com
#+end_src

** nginx
:PROPERTIES:
:CREATED:  [2022-09-22 Thu 17:16]
:ID:       79d93393-eb3d-45f1-9741-16e64d54b6af
:header-args: :dir ssh:nanjigen@profile-droplet:/
:END:

#+begin_src sh :tangle /ssh:profile-droplet|sudo:profile-droplet:/etc/nginx/sites-available/default
##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# https://www.nginx.com/resources/wiki/start/
# https://www.nginx.com/resources/wiki/start/topics/tutorials/config_pitfalls/
# https://wiki.debian.org/Nginx/DirectoryStructure
#
# In most cases, administrators will remove this file from sites-enabled/ and
# leave it as reference inside of sites-available where it will continue to be
# updated by the nginx packaging team.
#
# This file will automatically load configuration files provided by other
# applications, such as Drupal or Wordpress. These applications will be made
# available underneath a path with that package name, such as /drupal8.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#
server {
	listen 80 default_server;
	# listen 893 default_server;
	listen [::]:80 default_server;

	# SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

	root /srv/www/danielotto.jp/output;
	# alias /srv/www/danielotto.jp/output;

    location /output/ {
        autoindex on;
    }

	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html;

	server_name _;

	# location / {
	# 	# First attempt to serve request as file, then
	# 	# as directory, then fall back to displaying a 404.
	# 	try_files $uri $uri/ =404;
	# }

	# pass PHP scripts to FastCGI server
	#
	#location ~ \.php$ {
	#	include snippets/fastcgi-php.conf;
	#
	#	# With php-fpm (or other unix sockets):
	#	fastcgi_pass unix:/run/php/php7.4-fpm.sock;
	#	# With php-cgi (or other tcp sockets):
	#	fastcgi_pass 127.0.0.1:9000;
	#}

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	#location ~ /\.ht {
	#	deny all;
	#}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}

#+end_src

** git deployment
:PROPERTIES:
:CREATED:  [2022-09-28 Wed 15:29]
:ID:       bd762a86-cf35-4873-ace8-1c6ddb80c862
:END:
https://www.digitalocean.com/community/tutorials/how-to-set-up-automatic-deployment-with-git-with-a-vps

post-receive hook
#+begin_src sh :tangle /ssh:nanjigen@profile-droplet:/var/repo/site.git/hooks/post-receive :tangle-mode (identity #o755)
#!/bin/sh
git --work-tree=/srv/www/danielotto.jp --git-dir=/var/repo/site.git checkout -f
#+end_src

* Theme
:PROPERTIES:
:CREATED:  [2022-09-22 Thu 16:57]
:ID:       3c505129-0b7a-44a5-91a9-e48bb46413fc
:END:
#+begin_src css :tangle theme/static/main.css

#+end_src

The below is required to get the right dependencies
#+begin_src elisp :tangle publish.el
;; Guarantee the freshest version of the weblorg
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/weblorg")
(add-to-list 'load-path "~/.emacs.d/.local/straight/repos/templatel")
(require 'weblorg)
(require 'templatel)

;; Setup package management
(require 'package)
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
(package-initialize)
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

;; Install and configure dependencies
(use-package templatel :ensure t)
(use-package htmlize
  :ensure t
  :config
  (setq org-html-htmlize-output-type 'css))
#+end_src

#+begin_src elisp :tangle publish.el
(weblorg-site
 :template-vars '(("site_name" . "Daniel Otto's profile site")
                  ("site_author" "Daniel Otto")
                  ("site_email" . "translation@danielotto.jp")
                  ("site_description" . "My personal profile and blog about Linguistics, computing and translation.")))

(setq weblorg-default-url "http://www.danielotto.jp")

;; route for rendering each post
(weblorg-route
 :name "posts"
 :input-pattern "posts/*.org"
 :template "post.html"
 :output "output/posts/{{ slug }}.html"
 :url "/posts/{{ slug }}.html")

;; route for rendering the index page of the blog
(weblorg-route
 :name "blog"
 :input-pattern "posts/*.org"
 :input-aggregate #'weblorg-input-aggregate-all-desc
 :template "blog.html"
 :output "output/index.html"
 :url "/")

;; route for rendering each page
(weblorg-route
 :name "pages"
 :input-pattern "pages/*.org"
 :template "page.html"
 :output "output/{{ slug }}.html"
 :url "/{{ slug }}.html")

;; route for static assets that also copies files to output directory
(weblorg-copy-static
 :output "static/{{ file }}"
 :url "/static/{{ file }}")

;; fire the engine and export all the files declared in the routes above
(weblorg-export)
#+end_src
